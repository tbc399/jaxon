package templates

import accountModels "jaxon.app/jaxon/internal/account/models/accounts"

templ AccountsTab(accounts map[string][]accountModels.Account, stripePubKey string) {
	<!-- List of accounts -->
	<div
		id="accounts-tab-list"
		class="pt-6 pb-2 items-center gap-y-3 gap-x-3 overflow-y-auto [&::-webkit-scrollbar]:w-1 [&::-webkit-scrollbar]:bg-slate-900 [&::-webkit-scrollbar-thumb]:bg-slate-800"
		hx-get="/accounts/accounts-tab"
		hx-trigger="accountsLinked"
		hx-swap="outerHTML"
	>
		<div class="flex justify-end mb-4 pe-2">
			<button
				id="add-account-button"
				type="button"
				title="Connect new account"
				class="py-1.5 ps-2.5 pe-3.5 inline-flex items-center gap-x-1 text-sm font-semibold rounded-md
                      text-gray-100 bg-teal-600 active:bg-teal-600 hover:bg-teal-700 disabled:opacity-50 
                      disabled:pointer-events-none"
			>
				<svg viewBox="0 0 24 24" class="size-3.5 fill-none stroke-[2.5px] stroke-gray-100">
					<path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15"></path>
				</svg>
				Add account
			</button>
			<script>
              htmx.on("#add-account-button", "click",
                async function(evt) {
                  fetch("/accounts/connect")
                    .then(async function(response) {
                      return response.json();
                    }).then(async function(json) {
                      const key = 
                      const stripe = new Stripe("{ stripePubKey }");
                      const sessionResult = await stripe.collectFinancialConnectionsAccounts({
                        clientSecret: json["client_secret"]
                      }).then(async function(result) {
                        if (result.error) {
                          // Inform the customer that there was an error.
                          console.log(result.error.message);
                        // Handle next step based on length of accounts array
                        } else if (result.financialConnectionsSession.accounts.length === 0) {
                          console.log('No accounts were linked');
                        } else {
                          //console.log(result.financialConnectionsSession.accounts)
                          event = new CustomEvent("accountsLinked")
                          e = document.getElementById("accounts-tab-list")
                          e.dispatchEvent(event)
                        }
                      });
                    });
                }
              );
            </script>
		</div>
		if len(accounts) > 0 {
			for acctType, accountList := range accounts {
				<div>
					<h2 class="flex justify-start text-gray-200 font-semibold mb-4">{ acctType }</h2>
				</div>
				<div class="grid grid-cols-2 gap-4">
					for _, account := range accountList {
						<div class="flex flex-col rounded-lg w-full border border-gray-700/40 shadow-sm shadow-gray-950 bg-gray-800/25 text-gray-300 p-4">
							<div class="flex flex-row justify-between mb-4">
								<div class="flex flex-row gap-x-2 items-center">
									<div class="text-sm font-semibold">{ account.Name }</div>
									<div class="text-gray-400 font-semibold text-xs">****{ account.Last4 }</div>
								</div>
								<div class="flex flex-row gap-x-1">
									<div class="flex items-center text-xs text-gray-500">Synced { account.LastSyncDisplay() }</div>
									<div class="hs-dropdown relative inline-flex" data-hs-dropdown-placement="bottom-right">
										<button id="hs-dropdown-with-header" type="button" class="hs-dropdown-toggle inline-flex justify-center items-center gap-x-2 text-sm font-semibold rounded text-gray-500 hover:bg-gray-800">
											<svg viewBox="0 0 24 24" class="size-4 fill-none stroke-[2.5] stroke-slate-500">
												<path stroke-linecap="round" stroke-linejoin="round" d="M12 6.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5ZM12 12.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5ZM12 18.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5Z"></path>
											</svg>
										</button>
										<div class="hs-dropdown-menu transition-[opacity,margin] duration hs-dropdown-open:opacity-100 opacity-0 hidden min-w-36 z-10 shadow-md rounded-lg p-1 bg-gray-900 border border-slate-800" aria-labelledby="hs-dropdown-with-header">
											<div class="py-2 first:pt-0 last:pb-0">
												<a class="flex justify-start gap-x-2 py-1.5 px-2.5 rounded-md text-xs text-gray-800 focus:ring-2 focus:ring-blue-500 dark:text-gray-400 hover:bg-slate-800/50 dark:hover:text-slate-300 dark:focus:outline-none dark:focus:ring-1 dark:focus:ring-slate-600" href="#">
													<svg
														class="flex-shrink-0 size-4 fill-none stroke-gray-500 stroke-2"
														width="24"
														height="24"
														viewBox="0 0 24 24"
														stroke-linecap="round"
														stroke-linejoin="round"
													>
														<path stroke-linecap="round" stroke-linejoin="round" d="M13.181 8.68a4.503 4.503 0 0 1 1.903 6.405m-9.768-2.782L3.56 14.06a4.5 4.5 0 0 0 6.364 6.365l3.129-3.129m5.614-5.615 1.757-1.757a4.5 4.5 0 0 0-6.364-6.365l-4.5 4.5c-.258.26-.479.541-.661.84m1.903 6.405a4.495 4.495 0 0 1-1.242-.88 4.483 4.483 0 0 1-1.062-1.683m6.587 2.345 5.907 5.907m-5.907-5.907L8.898 8.898M2.991 2.99 8.898 8.9"></path>
													</svg>
													Disconnect
												</a>
											</div>
										</div>
									</div>
								</div>
							</div>
							<span class="text-xs font-semibold text-gray-500">{ account.InstitutionName }</span>
						</div>
					}
				</div>
			}
		} else {
			<span class="text-white">No Accounts</span>
		}
	</div>
}
